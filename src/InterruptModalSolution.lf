target C {
    platform: {
      name: "rp2040",
      board: "pololu_3pi_2040_robot"
    },
    threading: false,
    keepalive: true
  }

import Display from "lib/Display.lf"

preamble {=
    #include <stdio.h>
    #include <pico/stdlib.h>
    #include <hardware/gpio.h>
=}



main reactor {
    physical action interrupt_action
    d = new Display()

    preamble {=
        static void *interrupt_asserted;
        static interval_t phy_time = 0;
        static uint32_t count = 0;
        int flag = 0;

        void custom_callback(uint gpio, uint32_t event_mask) {
            if (((lf_time_physical()-phy_time) / 1000000) > 200) {
                lf_schedule(interrupt_asserted, 0);
            }
            phy_time = lf_time_physical();
        }
    =}

    reaction(startup)->interrupt_action {=
        interrupt_asserted = interrupt_action;
        gpio_set_dir(25, GPIO_IN);
        gpio_set_irq_enabled_with_callback(25,
                                    GPIO_IRQ_EDGE_FALL,
                                    true,
                                    (void*)&custom_callback);
    =}


    initial mode count_up {
        timer t1(0, 250 msec)
        reaction(t1)->d.line0 {=
            static char buf0[17];
            snprintf(buf0, 17, "%u", count);
            lf_set(d.line0, buf0);
            count++;
        =}

        reaction(interrupt_action) ->history(count_down) {=
            lf_set_mode(count_down);
        =}
    }

    mode count_down {
        timer t2(0, 500 msec)
        reaction(t2)->d.line0 {=
            static char buf0[17];
            snprintf(buf0, 17, "%u", count);
            lf_set(d.line0, buf0);
            count--;
        =}

        reaction(interrupt_action)->history(count_up) {=
            lf_set_mode(count_up);
        =}
    }

}